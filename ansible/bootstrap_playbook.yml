# ansible/bootstrap_playbook.yml
- hosts: local
  become: yes
  vars_files:
    - config.yml
    - secrets.yml
  tasks:
    - name: Ensure curl is installed
      apt:
        name: curl
        state: present

    - name: Install Docker dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - software-properties-common
        state: present

    - name: Create directory for Docker keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.gpg
        mode: '0644'

    - name: Add Docker APT repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ubuntu_release }} stable"
        state: present
        update_cache: yes

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    - name: Install k3s
      shell: |
        curl -sfL https://get.k3s.io | sh -
      args:
        executable: /bin/bash

    - name: Ensure k3s is running
      systemd:
        name: k3s
        state: started
        enabled: yes

    - name: Create the argocd namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: argocd

    - name: Install Argo CD
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: argocd-server
            namespace: argocd
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: argocd-server
            template:
              metadata:
                labels:
                  app: argocd-server
              spec:
                containers:
                  - name: argocd-server
                    image: argoproj/argocd:latest
                    ports:
                      - containerPort: 8080

    - name: Wait for Argo CD pods to be ready
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: argocd
        label_selectors:
          - app=argocd-server
      register: result
      until: result.resources | selectattr('status.phase', 'equalto', 'Running') | list | length > 0
      retries: 5
      delay: 30

    - name: Forward the Argo CD server port
      community.general.shell:
        cmd: "kubectl port-forward svc/argocd-server -n argocd 8080:443 &"
        async: 1
        poll: 0

    - name: Get initial Argo CD admin password
      kubernetes.core.k8s_info:
        kind: Secret
        namespace: argocd
        name: argocd-initial-admin-secret
      register: argocd_secret

    - name: Decode initial admin password
      set_fact:
        argocd_password: "{{ argocd_secret.resources[0].data.password | b64decode }}"

    - name: Display initial Argo CD admin password
      debug:
        msg: "Initial Argo CD admin password: {{ argocd_password }}"