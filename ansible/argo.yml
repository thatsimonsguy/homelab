# ansible/argo.yml
---
- hosts: local
  become: yes
  vars_files:
    - config.yml
    - secrets.yml
  vars:
    argocd_namespace: argocd
    argocd_install_url: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

  tasks:
    - name: Ensure KUBECONFIG is set
      set_fact:
        kubectl_env:
          KUBECONFIG: "{{ kubeconfig_target_path }}"

    - name: Create Argo CD namespace
      command: kubectl create namespace "{{ argocd_namespace }}"
      environment: "{{ kubectl_env }}"
      ignore_errors: yes

    - name: Install Argo CD
      command: kubectl apply -n "{{ argocd_namespace }}" -f "{{ argocd_install_url }}"
      environment: "{{ kubectl_env }}"

    - name: Download Argo CD CLI
      get_url:
        url: "https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64"
        dest: /usr/local/bin/argocd
        mode: '0755'

    - name: Set Argo CD API server to NodePort
      command: >
        kubectl patch svc argocd-server -n "{{ argocd_namespace }}" -p '{"spec": {"type": "NodePort"}}'
      environment: "{{ kubectl_env }}"
      ignore_errors: yes

    - name: Retrieve initial admin password
      shell: kubectl -n "{{ argocd_namespace }}" get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      register: initial_admin_password
      environment: "{{ kubectl_env }}"

    - name: Display initial admin password
      debug:
        msg: "Initial admin password: {{ initial_admin_password.stdout }}"

    - name: Get NodePort
      shell: kubectl get svc argocd-server -n "{{ argocd_namespace }}" -o jsonpath="{.spec.ports[?(@.port==443)].nodePort}"
      register: nodeport
      environment: "{{ kubectl_env }}"

    - name: Display NodePort
      debug:
        msg: "Argo CD UI NodePort: {{ nodeport.stdout }}"

    - name: Create Sealed Secrets Namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: sealed-secrets

    - name: Install Sealed Secrets Controller
      shell: kubectl apply -f https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.26.3/controller.yaml -n sealed-secrets
      environment:
        KUBECONFIG: "{{ kubectl_env }}"

    - name: Inject Sealed Secrets Key
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: sealed-secrets-key
            namespace: sealed-secrets
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ sealed_secrets_key.cert | b64encode }}"
            tls.key: "{{ sealed_secrets_key.key | b64encode }}"

    - name: Render Argo CD application manifest from template
      template:
        src: templates/homelab_apps.yml
        dest: "{{ apps_yaml_path }}"
      environment: "{{ kubectl_env }}"

    - name: Apply Argo CD application manifest
      command: kubectl apply -f {{ apps_yaml_path }}
      environment: "{{ kubectl_env }}"